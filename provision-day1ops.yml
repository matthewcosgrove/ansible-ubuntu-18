---

- name: Ubuntu desktop environment playbook
  hosts: localhost
  vars_prompt:
    - name: "run_installs"
      prompt: "Do you want to run installs (yes/no)?"
      private: no
    - name: "use_secret_dotfiles"
      prompt: "Do you want to use secret dotfiles (yes/no)?"
      private: no
    - name: "secret_github_repo_userid"
      prompt: "Which secret dotfiles GitHub repo userid to use (corresponds to git@github.com:${secret_github_repo_userid}/dotfiles-secret.git)? e.g. matthewcosgrove"
      private: no
      default: "matthewcosgrove"
  environment:
    DEBIAN_FRONTEND: noninteractive
  roles:
    - { role: geerlingguy.docker, become: yes }

  tasks:
    - name: gather installed packages to check for Slack, Zoom, Chrome etc
      package_facts:
    - name: Install Slack.
      become: true
      apt:
        deb: https://downloads.slack-edge.com/linux_releases/slack-desktop-3.4.2-amd64.deb
      when:
        - run_installs | bool
        - '"slack-desktop" not in ansible_facts.packages'
    - name: Install Zoom.
      become: true
      apt:
        deb: https://zoom.us/client/latest/zoom_amd64.deb
      when:
        - run_installs | bool
        - '"zoom" not in ansible_facts.packages'
    - name: Install Chrome.
      become: true
      apt:
        deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      when:
        - run_installs | bool
        - '"google-chrome-stable" not in ansible_facts.packages'
    - name: Install Tusk.
      become: true
      apt:
        deb: https://github.com/klaussinani/tusk/releases/download/v0.23.0/tusk_0.23.0_amd64.deb
      when:
        - run_installs | bool
        - '"tusk" not in ansible_facts.packages'

    - name: Set up libsecret for git credential helper
      command: make --directory=/usr/share/doc/git/contrib/credential/libsecret
      become: true
    - name: Global git config set up
      git_config:
        scope: global
        name: "{{ item.value.name }}"
        value: "{{ item.value.value }}"
      with_dict: "{{ git_configs }}"
      vars:
        git_configs:
          credential_helper:
            name: credential.helper
            value: /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
          default_push_behaviour:
            name: push.default
            value: simple
          user_email:
            name: user.email
            value: mc.matthew.cosgrove@gmail.com
          user_name:
            name: user.name
            value: matthewcosgrove
          default_editor:
            name: core.editor
            value: vim
    - name: Ensure ssh key generated ready to upload to GitHub and GitLab
      command: ssh-keygen -t rsa -f "{{ ssh.key_pair_path }}" -N ''
      args:
        creates: "{{ ssh.key_pair_path }}"
    - name: check for creds-for-curl-gitlab.txt
      stat:
        path: 'creds-for-curl-gitlab.txt'
      register: credsforcurlgitlab
    - name: Ensure creds-for-curl-gitlab.txt is populated with GitLab access token which needs to be with scope api
      wait_for:
        path: creds-for-curl-gitlab.txt
        search_regex: .*PRIVATE-TOKEN:\s\w+
      when: credsforcurlgitlab.stat.exists
    - name: Upload SSH key to GitLab
      shell: KEY=$( cat {{ ssh.key_pair_path }}.pub );TITLE=${KEY/* };curl -X POST -K creds-for-curl-gitlab.txt -F "title=$TITLE" -F "key=$KEY" "https://gitlab.com/api/v4/user/keys"
      args:
        executable: /bin/bash
      when: credsforcurlgitlab.stat.exists
    - name: check for creds-for-curl-github.netrc
      stat:
        path: 'creds-for-curl-github.netrc'
      register: credsforcurlgithub
    - name: Wait until creds-for-curl-github.netrc is created from creds-for-curl-github.netrc.template and updated with GitHub access key with scope write:public_key
      wait_for:
        path: creds-for-curl-github.netrc
        search_regex: .*password\s\w+
      when: credsforcurlgithub.stat.exists
    - name: Upload SSH key to GitHub
      shell: KEY=$( cat {{ ssh.key_pair_path }}.pub );TITLE=${KEY/* };JSON=$( jo title="$TITLE" key="$KEY" );curl --netrc-file creds-for-curl-github.netrc -d "$JSON" https://api.github.com/user/keys
      args:
        executable: /bin/bash
      when: credsforcurlgithub.stat.exists
    - name: Make sure required folders are present
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "~/.dotfiles"
        - "~/.dotfiles/public"
        - "~/.dotfiles/private"
    - name: Clone public dotfiles
      git:
        repo: git@github.com:matthewcosgrove/dotfiles-ubuntu.git
        dest: ~/.dotfiles/public
        accept_hostkey: yes
        update: no
      become: no
    - name: public symbolic links
      file:
        src: "~/.dotfiles/public/{{ item.dotfilename }}"
        path: "~/{{ item.dotfilename }}"
        state: link
      with_items:
        - { dotfilename: '.bash_aliases'}
        - { dotfilename: '.bashrc_extension'}
        - { dotfilename: '.env'}
        - { dotfilename: '.functions'}
        - { dotfilename: '.vimrc'}
    - name: extend bashrc
      lineinfile:
        path: ~/.bashrc
        regexp: '^source ~/.bashrc_extension'
        insertafter: EOF
        line: 'source ~/.bashrc_extension'
    - name: Clone private dotfiles
      git:
        repo: git@github.com:{{ secret_github_repo_userid }}/dotfiles-secret.git
        dest: ~/.dotfiles/private
        accept_hostkey: yes
        update: yes
      when: use_secret_dotfiles | bool
    - include_tasks: "~/.dotfiles/private/tasks.yml"
      when: use_secret_dotfiles | bool
