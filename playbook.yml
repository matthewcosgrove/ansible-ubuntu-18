---

- name: Ubuntu desktop environment playbook
  hosts: localhost
  environment:
    DEBIAN_FRONTEND: noninteractive
  roles:
    - { role: geerlingguy.docker, become: yes }

  tasks:
    - name: add apt repo for remmina
      become: true
      apt_repository:
        repo: ppa:remmina-ppa-team/remmina-next
    - name: Add apt repos e.g. Google Cloud SDK
      apt_repository:
        repo: deb {{ item.value.url }}
        state: present
        filename: "{{ item.value.filename }}"
      become: true
      with_dict: "{{ apt_repository_repos }}"
      vars:
        apt_repository_repos:
          google-cloud-sdk:
            url: '[signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main'
            filename: google-cloud-sdk
    - name: Import the Google Cloud Platform public key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        keyring: /usr/share/keyrings/cloud.google.gpg
      become: true
    - name: Do apt-get update after adding Google Cloud SDK package source
      become: true
      apt:
        update-cache: yes
    - name: Install a list of packages
      become: true
      apt:
        name: "{{ packages }}"
      vars:
        packages:
          - jq
          - jo
          - iptables
          - sshuttle
          - remmina
          - remmina-plugin-rdp
          - remmina-plugin-secret
          - wireshark
          - cntlm
          - tree
          - direnv
          - bison
          - curl
          - grep
          - gzip
          - less
          - nmap
          - openssl
          - sshpass
          - tar
          - unzip
          - vim
          - wget
          - whois
          - zip
          # git credential helper
          - libsecret-1-0
          - libsecret-1-dev
          # END git credential helper
          - openconnect
          - nautilus-dropbox
          - net-tools
          - kazam
          - virtualbox
          - google-cloud-sdk
          - tmux
          - golang-cfssl
          # bosh dependencies https://bosh.io/docs/cli-v2-install/
          - build-essential
          - zlibc
          - zlib1g-dev
          - ruby
          - ruby-dev
          - openssl
          - libxslt1-dev
          - libxml2-dev
          - libssl-dev
          - libreadline7
          - libreadline-dev
          - libyaml-dev
          - libsqlite3-dev
          - sqlite3
          # END bosh dependencies
    - name: Download binary files and place on PATH
      become: yes
      get_url: url={{ item.value.url }} dest=/usr/local/bin/{{ item.value.name }} mode=0755 force=yes
      with_dict: "{{ binaries }}"
      vars:
        binaries:
          kubectl:
            name: kubectl
            url: https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kubectl
          bosh-cli:
            name: bosh
            url: https://github.com/cloudfoundry/bosh-cli/releases/download/v5.5.1/bosh-cli-5.5.1-linux-amd64
    - name: gather installed packages to check for Slack, Zoom, Chrome etc
      package_facts:
    - name: Install Slack.
      become: true
      apt:
        deb: https://downloads.slack-edge.com/linux_releases/slack-desktop-3.4.2-amd64.deb
      when: '"slack-desktop" not in ansible_facts.packages'
    - name: Install Zoom.
      become: true
      apt:
        deb: https://zoom.us/client/latest/zoom_amd64.deb
      when: '"zoom" not in ansible_facts.packages'
    - name: Install Chrome.
      become: true
      apt:
        deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      when: '"google-chrome-stable" not in ansible_facts.packages'
    - name: Install Tusk.
      become: true
      apt:
        deb: https://github.com/klaussinani/tusk/releases/download/v0.23.0/tusk_0.23.0_amd64.deb
      when: '"tusk" not in ansible_facts.packages'

    - name: Set up libsecret for git credential helper
      command: make --directory=/usr/share/doc/git/contrib/credential/libsecret
      become: true
    - name: Global git config set up
      git_config:
        scope: global
        name: "{{ item.value.name }}"
        value: "{{ item.value.value }}"
      with_dict: "{{ git_configs }}"
      vars:
        git_configs:
          credential_helper:
            name: credential.helper
            value: /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
          default_push_behaviour:
            name: push.default
            value: simple
          user_email:
            name: user.email
            value: mc.matthew.cosgrove@gmail.com
          user_name:
            name: user.name
            value: matthewcosgrove
          default_editor:
            name: core.editor
            value: vim
    - name: Ensure ssh key generated ready to upload to GitHub and GitLab
      command: ssh-keygen -t rsa -f "{{ ssh.key_pair_path }}" -N ''
      args:
        creates: "{{ ssh.key_pair_path }}"
    - name: check for creds-for-curl-gitlab.txt
      stat:
        path: 'creds-for-curl-gitlab.txt'
      register: credsforcurlgitlab
    - name: Ensure creds-for-curl-gitlab.txt is populated with GitLab access token which needs to be with scope api
      wait_for:
        path: creds-for-curl-gitlab.txt
        search_regex: .*PRIVATE-TOKEN:\s\w+
      when: credsforcurlgitlab.stat.exists
    - name: Upload SSH key to GitLab
      shell: KEY=$( cat {{ ssh.key_pair_path }}.pub );TITLE=${KEY/* };curl -X POST -K creds-for-curl-gitlab.txt -F "title=$TITLE" -F "key=$KEY" "https://gitlab.com/api/v4/user/keys"
      args:
        executable: /bin/bash
      when: credsforcurlgitlab.stat.exists
    - name: check for creds-for-curl-github.netrc
      stat:
        path: 'creds-for-curl-github.netrc'
      register: credsforcurlgithub
    - name: Wait until creds-for-curl-github.netrc is created from creds-for-curl-github.netrc.template and updated with GitHub access key with scope write:public_key
      wait_for:
        path: creds-for-curl-github.netrc
        search_regex: .*password\s\w+
      when: credsforcurlgithub.stat.exists
    - name: Upload SSH key to GitHub
      shell: KEY=$( cat {{ ssh.key_pair_path }}.pub );TITLE=${KEY/* };JSON=$( jo title="$TITLE" key="$KEY" );curl --netrc-file creds-for-curl-github.netrc -d "$JSON" https://api.github.com/user/keys
      args:
        executable: /bin/bash
      when: credsforcurlgithub.stat.exists
    - name: mkdir for gists
      file:
        path: ~/gists
        state: directory
    - name: Clone dotfiles gist
      git:
        repo: git@gist.github.com:f012f714f8a401f965c86f5bc648a300.git
        dest: ~/gists/dotfiles
        accept_hostkey: yes
        update: no
      become: no
    - name: symbolic links
      file:
        src: "~/gists/dotfiles/{{ item.dotfilename }}"
        path: "~/{{ item.dotfilename }}"
        state: link
      with_items:
        - { dotfilename: '.bash_aliases'}
        - { dotfilename: '.bashrc_extension'}
        - { dotfilename: '.env'}
        - { dotfilename: '.functions'}
        - { dotfilename: '.vimrc'}
    - name: extend bashrc
      lineinfile:
        path: ~/.bashrc
        regexp: '^source ~/.bashrc_extension'
        insertafter: EOF
        line: 'source ~/.bashrc_extension'
